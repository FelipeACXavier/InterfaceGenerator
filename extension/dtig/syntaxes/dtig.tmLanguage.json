{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "DTIG Language",
  "injectionSelector": "L: -comment",
  "patterns": [
    { "include": "#definition" },
    { "include": "#ctrl-statements" },
    { "include": "#functions" },
    { "include": "#types-keys" },
    { "include": "#getters" }
  ],
  "repository": {
    "expression": {
      "patterns": [
        { "include": "#getters" },
        { "include": "#types-keys" },
        { "include": "#numbers" },
        { "include": "#operators" },
        { "include": "#arguments" }
      ]
    },
    "definition": {
      "patterns": [
        {
          "captures": {
            "1": { "name": "entity.name.class.dtig" },
            "2": { "name": "constant.character.class.dtig" }
          },
          "name": "constant.character.delimiter.dtig",
          "match": "^<(DTIG_[A-Z_]+)\\b(\\(([A-Z_]*)\\))?.*>"
        },
        {
          "captures": {
            "1": { "name": "entity.name.class.dtig" },
            "2": { "name": "keyword.function.dtig" },
            "3": { "name": "variable.parameter.dtig" }
          },
          "name": "constant.character.delimiter.dtig",
          "match": "(DTIG_DEF) (DTIG_[A-Z_]+)\\s?\\(([A-Z_, ]*)\\)"
        },
        {
          "name": "entity.name.class.dtig",
          "match": "DTIG_END_DEF"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "captures": {
            "1": { "name": "entity.name.function.dtig" },
            "2": { "patterns": [{ "include": "#expression" }] }
          },
          "match": "(DTIG_[A-Z_]+)\\(([\\w\\d_,> ]*)\\)"
        },
        {
          "captures": {
            "1": { "name": "keyword.function.dtig" },
            "2": { "patterns": [{ "include": "#expression" }] }
          },
          "match": "(DTIG>[A-Z_]+?)\\((.*?)\\)"
        }
      ]
    },
    "ctrl-statements": {
      "patterns": [
        {
          "captures": {
            "1": { "name": "keyword.control.start.dtig" },
            "2": { "patterns": [{ "include": "#expression" }] }
          },
          "match": "(DTIG_IF|DTIG_FOR)\\((.*)\\)"
        },
        {
          "name": "keyword.control.end.dtig",
          "match": "\\b(DTIG_ELSE|DTIG_ELSE_IF|DTIG_END_IF|DTIG_END_FOR)\\b"
        }
      ]
    },
    "append": {
      "patterns": [
        {
          "name": "entity.name.function.append.dtig",
          "match": "([\\w\\d_]+?DTIG[A-Z_]+)\\b"
        }
      ]
    },
    "getters": {
      "patterns": [
        {
          "name": "variable.name.dtig",
          "match": "(DTIG_ITEM_[A-Z_]+|DTIG_[A-Z_]+?_LENGTH|DTIG_INDEX)"
        },
        {
          "name": "entity.name.class.dtig",
          "match": "\\b(DTIG_INPUTS|DTIG_OUTPUTS|DTIG_PARAMETERS)\\b"
        },
        {
          "name": "variable.name.variable.dtig",
          "match": "DTIG>[A-Z_]+"
        }
      ]
    },
    "types-keys": {
      "patterns": [
        {
          "name": "constant.character.key.dtig",
          "match": "\\b(DTIG_KEY_[A-Z_]+)\\b"
        },
        {
          "name": "constant.character.type.dtig",
          "match": "\\b(DTIG_TYPE_[A-Z_]+)\\b"
        },
        {
          "name": "constant.character.formalism.dtig",
          "match": "\\b(DTIG_FORMALISM_[A-Z_]+)\\b"
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.dtig",
          "match": "-?[0-9]+(\\.[0-9]+)?"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.dtig",
          "match": "\\b(==|!=|<|>|<=|>=)\\b"
        },
        {
          "name": "keyword.operator.dtig",
          "match": "\\b(NOT|AND|OR|IN)\\b"
        }
      ]
    },
    "arguments": {
      "patterns": [
        {
          "name": "variable.parameter.dtig",
          "match": "\\b([A-Z_]+)\\b"
        }
      ]
    }
  },
  "scopeName": "source.dtig.injection"
}
